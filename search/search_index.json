{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ciclo de vida del software 1. Define ciclo de vida del software El ciclo de vida del software consiste en la ingenier\u00eda y desarrollo del software. Abarca la vida completa del software y sus fasen son An\u00e1lisis Dise\u00f1o Codificaci\u00f3n Pruebas Mantenimiento 2. Nombra las fases principales del desarrollo de software y explica brevemente que se hacen en cada una de ellas An\u00e1lisis -> Se determinan y definen las necesidades del cliente y se especifican los requisitos que debe cumplir el software Dise\u00f1o -> Se organiza el sistema en elemenos que pueden ser desarrollados por separado Codificaci\u00f3n -> Se escribe el c\u00f3digo fuente de cada componente Pruebas -> Se comprueba qque el programa funciona correctamente y se descubren defectos Mantenimiento -> Se realizan cambios en el software en su fase de explotaci\u00f3n, estos son: correctivo, perfectivo, evolutivo, adaptativo. 3. Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos del desarrollo del software. Consiste en ir realizando las fases en el orden indicado y el resultado de cada fase es la entrada del siguiente. 4. Ventajas e inconvenientes del modelo en cascada Desventajas: Este modelo se adapta mal al cambio continuo de especificaciones, al ser lineal no podemos empezar una etapa del proyecto sin haber terminado las anteriores. Ventajas: Es un modelo f\u00e1cil de entender e implementar, es conocido y utilizado con frecuencia. 5. \u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n? Validar consiste en comprobar si se est\u00e1 haciendo el producto y verificar en comprobar si se est\u00e1 haciendo correctamente. 6. Explica c\u00f3mo funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos Se van creando diferentes prototipos que el usuario o cliente va probando para ir refinando. Se crean prototipos r\u00e1pidos que luego se desechan y prototipos evolutivos que se usan como base para desarrollar el proyecto. Kanban y Scrum 1. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a Scrum Esta metodolog\u00eda gira en torno a un tablero Kanban, donde se visualizan las tareas. En este tablero se representa cada elemento de trabajo en una tarjeta diferente. En Kanban se tiene un flujo continuo del trabajo mientras que en Scrum se eval\u00faa el trabajo en un periodo de tiempo fijo por sprints. Los cambios en el proyecto se ven constantemente a diferencia de en Scrum que se analizan al final del sprint. 2. Explica c\u00f3mo funciona Scrum Scrum es un proceso en el que se aplican de manera regular un conjunto de pr\u00e1cticas para trabajar en equipo. Consiste en la ejecuci\u00f3n de ciclos temporales cortos y de duraci\u00f3n fija, que debe proporcionar un resultado completo. Cada ciclo se planea, se ejecuta y se acaba inspeccionando y adaptando. 3. Define los siguientes t\u00e9rminos Product backlog: es un listado de todas las tareas que se pretenden hacer en el desarrollo del proyecto. El orden de los \u00edtems de la lista se determina en funci\u00f3n del valor que aporta al cliente final respecto a riesgos y coste de completarlo. Spring backlog: Es una lista de las tareas que se han seleccionado para una interaci\u00f3n en concreto. Permite ver las tareas donde el equipo est\u00e1 teniendo problemas. 4. En la terminolog\u00eda Scrum, qu\u00e9 terminos se usan como sin\u00f3nimo de: Jefe de proyecto: Scrum master Cliente: Product Owner Equipo de desarollo: Development Team 5. Haz un resumen de los requisitos para poder usar Scrum Para poder usar Scrum se debe tener: Cultura de empresa basada en el trabajo en equipo Compromiso del cliente en colaborar y dirigir los resultados del proyecto Compromiso en la organizaci\u00f3n para resolver problemas y realizar cambios organizativos Compromiso de los miembros del equipo en colaborar Tama\u00f1o de equipo de entre 5 y 9 personas. Equipo trabajando en un mismo espacio com\u00fan. 6. Explica los 5 valores de la Programaci\u00f3n Extrema Comunicacion - > se valora la comunicaci\u00f3n interna entre los miembros del equipo de desarrollo y tambi\u00e9n con los clientes Simplicidad -> Se empiza con la soluci\u00f3n mas simple, esto incluye la refactorizaci\u00f3n del c\u00f3digo para preservarlo a medida que crece. Feedback -> Se hacen ciclos muy cortos de presentaci\u00f3n de resultados para que el cliente diga qu\u00e9 le parece, de esta manera se minimiza el riesgo de tener que rehacer partes que no cumplen las expectativas del cliente. Respeto -> Implica que un desarrollador no realice modificaciones que puedan tener un impacto negativo en el trabajo de sus compa\u00f1eros, aumentando el ritmo de producci\u00f3n Valent\u00eda -> Se deben reconocer los errores tan pronto como se detecten para no bajar la productividad. 7. \u00bfCu\u00e1les son las caracter\u00edsicas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Las otras metodolog\u00edas priorizan la planificaci\u00f3n del proyecto mientras que XP considera los cambios de requisitos inevitables por lo que prioriza la adaptaci\u00f3n sobre la previsi\u00f3n. Existe una mayor comunicaci\u00f3n con el cliente ya que este forma tambi\u00e9n parte del equipo. La programaci\u00f3n del software se hace siempre en pareja.","title":"Ciclo de vida del software"},{"location":"#ciclo-de-vida-del-software","text":"","title":"Ciclo de vida del software"},{"location":"#1-define-ciclo-de-vida-del-software","text":"El ciclo de vida del software consiste en la ingenier\u00eda y desarrollo del software. Abarca la vida completa del software y sus fasen son An\u00e1lisis Dise\u00f1o Codificaci\u00f3n Pruebas Mantenimiento","title":"1. Define ciclo de vida del software"},{"location":"#2-nombra-las-fases-principales-del-desarrollo-de-software-y-explica-brevemente-que-se-hacen-en-cada-una-de-ellas","text":"An\u00e1lisis -> Se determinan y definen las necesidades del cliente y se especifican los requisitos que debe cumplir el software Dise\u00f1o -> Se organiza el sistema en elemenos que pueden ser desarrollados por separado Codificaci\u00f3n -> Se escribe el c\u00f3digo fuente de cada componente Pruebas -> Se comprueba qque el programa funciona correctamente y se descubren defectos Mantenimiento -> Se realizan cambios en el software en su fase de explotaci\u00f3n, estos son: correctivo, perfectivo, evolutivo, adaptativo.","title":"2. Nombra las fases principales del desarrollo de software y explica brevemente que se hacen en cada una de ellas"},{"location":"#3-explica-brevemente-en-que-consiste-el-modelo-en-cascada-cuando-hablamos-del-desarrollo-del-software","text":"Consiste en ir realizando las fases en el orden indicado y el resultado de cada fase es la entrada del siguiente.","title":"3. Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos del desarrollo del software."},{"location":"#4-ventajas-e-inconvenientes-del-modelo-en-cascada","text":"Desventajas: Este modelo se adapta mal al cambio continuo de especificaciones, al ser lineal no podemos empezar una etapa del proyecto sin haber terminado las anteriores. Ventajas: Es un modelo f\u00e1cil de entender e implementar, es conocido y utilizado con frecuencia.","title":"4. Ventajas e inconvenientes del modelo en cascada"},{"location":"#5-que-se-entiende-por-verificacion-y-por-validacion","text":"Validar consiste en comprobar si se est\u00e1 haciendo el producto y verificar en comprobar si se est\u00e1 haciendo correctamente.","title":"5. \u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n?"},{"location":"#6-explica-como-funciona-el-modelo-de-desarrollo-mediante-creacion-de-prototipos","text":"Se van creando diferentes prototipos que el usuario o cliente va probando para ir refinando. Se crean prototipos r\u00e1pidos que luego se desechan y prototipos evolutivos que se usan como base para desarrollar el proyecto.","title":"6. Explica c\u00f3mo funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos"},{"location":"#kanban-y-scrum","text":"","title":"Kanban y Scrum"},{"location":"#1-haz-un-resumen-de-la-metodologia-kanban-e-indica-sus-diferencias-frente-a-scrum","text":"Esta metodolog\u00eda gira en torno a un tablero Kanban, donde se visualizan las tareas. En este tablero se representa cada elemento de trabajo en una tarjeta diferente. En Kanban se tiene un flujo continuo del trabajo mientras que en Scrum se eval\u00faa el trabajo en un periodo de tiempo fijo por sprints. Los cambios en el proyecto se ven constantemente a diferencia de en Scrum que se analizan al final del sprint.","title":"1. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a Scrum"},{"location":"#2-explica-como-funciona-scrum","text":"Scrum es un proceso en el que se aplican de manera regular un conjunto de pr\u00e1cticas para trabajar en equipo. Consiste en la ejecuci\u00f3n de ciclos temporales cortos y de duraci\u00f3n fija, que debe proporcionar un resultado completo. Cada ciclo se planea, se ejecuta y se acaba inspeccionando y adaptando.","title":"2. Explica c\u00f3mo funciona Scrum"},{"location":"#3-define-los-siguientes-terminos","text":"Product backlog: es un listado de todas las tareas que se pretenden hacer en el desarrollo del proyecto. El orden de los \u00edtems de la lista se determina en funci\u00f3n del valor que aporta al cliente final respecto a riesgos y coste de completarlo. Spring backlog: Es una lista de las tareas que se han seleccionado para una interaci\u00f3n en concreto. Permite ver las tareas donde el equipo est\u00e1 teniendo problemas.","title":"3. Define los siguientes t\u00e9rminos"},{"location":"#4-en-la-terminologia-scrum-que-terminos-se-usan-como-sinonimo-de","text":"Jefe de proyecto: Scrum master Cliente: Product Owner Equipo de desarollo: Development Team","title":"4. En la terminolog\u00eda Scrum, qu\u00e9 terminos se usan como sin\u00f3nimo de:"},{"location":"#5-haz-un-resumen-de-los-requisitos-para-poder-usar-scrum","text":"Para poder usar Scrum se debe tener: Cultura de empresa basada en el trabajo en equipo Compromiso del cliente en colaborar y dirigir los resultados del proyecto Compromiso en la organizaci\u00f3n para resolver problemas y realizar cambios organizativos Compromiso de los miembros del equipo en colaborar Tama\u00f1o de equipo de entre 5 y 9 personas. Equipo trabajando en un mismo espacio com\u00fan.","title":"5. Haz un resumen de los requisitos para poder usar Scrum"},{"location":"#6-explica-los-5-valores-de-la-programacion-extrema","text":"Comunicacion - > se valora la comunicaci\u00f3n interna entre los miembros del equipo de desarrollo y tambi\u00e9n con los clientes Simplicidad -> Se empiza con la soluci\u00f3n mas simple, esto incluye la refactorizaci\u00f3n del c\u00f3digo para preservarlo a medida que crece. Feedback -> Se hacen ciclos muy cortos de presentaci\u00f3n de resultados para que el cliente diga qu\u00e9 le parece, de esta manera se minimiza el riesgo de tener que rehacer partes que no cumplen las expectativas del cliente. Respeto -> Implica que un desarrollador no realice modificaciones que puedan tener un impacto negativo en el trabajo de sus compa\u00f1eros, aumentando el ritmo de producci\u00f3n Valent\u00eda -> Se deben reconocer los errores tan pronto como se detecten para no bajar la productividad.","title":"6. Explica los 5 valores de la Programaci\u00f3n Extrema"},{"location":"#7-cuales-son-las-caracterisicas-distintivas-de-xp-frente-a-otras-metodologias-agiles","text":"Las otras metodolog\u00edas priorizan la planificaci\u00f3n del proyecto mientras que XP considera los cambios de requisitos inevitables por lo que prioriza la adaptaci\u00f3n sobre la previsi\u00f3n. Existe una mayor comunicaci\u00f3n con el cliente ya que este forma tambi\u00e9n parte del equipo. La programaci\u00f3n del software se hace siempre en pareja.","title":"7. \u00bfCu\u00e1les son las caracter\u00edsicas distintivas de XP frente a otras metodolog\u00edas \u00e1giles?"},{"location":"Lenguajes%20de%20programaci%C3%B3n/","text":"Lenguajes de programaci\u00f3n 1. \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los lenguajes imperativos? Nombra al menos 2 de cada tipo En los lenguajes imperativos se escriben secuencias de operaciones a realizar mientras que en el declarativo se especifica el resultado final deseado Imperativo: Python, JavaScript Declarativo: SQL, Lisp 2. Explica qu\u00e9 es compilar y qu\u00e9 es interpretar Cuando compilamos el c\u00f3digo se pasa el c\u00f3digo de alto nivel a uno de mas bajo nivel que luego es ejecutado por la m\u00e1quina. Interpretar consiste en ejecutar directamente las instrucciones escritas de un lenguajes de programaci\u00f3n. 3. Ventajas de los lenguajes compilados Un lenguaje compilado genera un programa que puede ejecutarse por si solo mientras que el interpretado necesita su interprete para poder ejecutarse Un lenguaje compilado es mas r\u00e1pido en ejecutarse que un lenguaje interpretado. 4. Ventajas de los lenguajes interpretados Es m\u00e1s f\u00e1cil escribir un programa multiplataforma con lenguajes interpretados, su depuraci\u00f3n es m\u00e1s f\u00e1cil porque podemos modificar el c\u00f3digo que se est\u00e1 ejecutando. 5. Nombra 2 lenguajes interpretados y 2 compilados Interpretado: Python y JavaScript Compilado: C, C++ 6. \u00bfPuede considerarse c\u00f3digo objeto al bytecode generado en Java tras la compilaci\u00f3n? Se puede considerar c\u00f3digo objeto, pero destinado a la m\u00e1quina virtual de Java en vez de c\u00f3digo objeto nativo. 7. Pon un ejemplo de lenguaje de los siguientes tipos Bajo nivel: C\u00f3digo m\u00e1quina Medio nivel: C Alto nivel: Java 8. \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes? C: Procedural C++: Multiparadigma SQL: Multiaradigma Java: Orientado a objetos JavaScript: Multiparadigma Lisp: Multiparadigma Prolog: Log\u00edca 9. Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguaje de programaci\u00f3n para el desarrollo del software Se debe tener en cuenta el campo de apliaci\u00f3n, la experiencia previa, herramientas de desarrollo, documentaci\u00f3n, base de usuarios, reusabilidad, transportabilidad e imposici\u00f3n al cliente.","title":"Lenguajes de programaci\u00f3n"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#lenguajes-de-programacion","text":"","title":"Lenguajes de programaci\u00f3n"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#1-que-diferencia-existe-entre-los-lenguajes-declarativos-y-los-lenguajes-imperativos-nombra-al-menos-2-de-cada-tipo","text":"En los lenguajes imperativos se escriben secuencias de operaciones a realizar mientras que en el declarativo se especifica el resultado final deseado Imperativo: Python, JavaScript Declarativo: SQL, Lisp","title":"1. \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los lenguajes imperativos? Nombra al menos 2 de cada tipo"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#2-explica-que-es-compilar-y-que-es-interpretar","text":"Cuando compilamos el c\u00f3digo se pasa el c\u00f3digo de alto nivel a uno de mas bajo nivel que luego es ejecutado por la m\u00e1quina. Interpretar consiste en ejecutar directamente las instrucciones escritas de un lenguajes de programaci\u00f3n.","title":"2. Explica qu\u00e9 es compilar y qu\u00e9 es interpretar"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#3-ventajas-de-los-lenguajes-compilados","text":"Un lenguaje compilado genera un programa que puede ejecutarse por si solo mientras que el interpretado necesita su interprete para poder ejecutarse Un lenguaje compilado es mas r\u00e1pido en ejecutarse que un lenguaje interpretado.","title":"3. Ventajas de los lenguajes compilados"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#4-ventajas-de-los-lenguajes-interpretados","text":"Es m\u00e1s f\u00e1cil escribir un programa multiplataforma con lenguajes interpretados, su depuraci\u00f3n es m\u00e1s f\u00e1cil porque podemos modificar el c\u00f3digo que se est\u00e1 ejecutando.","title":"4. Ventajas de los lenguajes interpretados"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#5-nombra-2-lenguajes-interpretados-y-2-compilados","text":"Interpretado: Python y JavaScript Compilado: C, C++","title":"5. Nombra 2 lenguajes interpretados y 2 compilados"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#6-puede-considerarse-codigo-objeto-al-bytecode-generado-en-java-tras-la-compilacion","text":"Se puede considerar c\u00f3digo objeto, pero destinado a la m\u00e1quina virtual de Java en vez de c\u00f3digo objeto nativo.","title":"6. \u00bfPuede considerarse c\u00f3digo objeto al bytecode generado en Java tras la compilaci\u00f3n?"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#7-pon-un-ejemplo-de-lenguaje-de-los-siguientes-tipos","text":"Bajo nivel: C\u00f3digo m\u00e1quina Medio nivel: C Alto nivel: Java","title":"7. Pon un ejemplo de lenguaje de los siguientes tipos"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#8-que-paradigma-de-programacion-siguen-los-siguientes-lenguajes","text":"C: Procedural C++: Multiparadigma SQL: Multiaradigma Java: Orientado a objetos JavaScript: Multiparadigma Lisp: Multiparadigma Prolog: Log\u00edca","title":"8. \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes?"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#9-explica-que-criterios-pueden-seguirse-a-la-hora-de-elegir-un-lenguaje-de-programacion-para-el-desarrollo-del-software","text":"Se debe tener en cuenta el campo de apliaci\u00f3n, la experiencia previa, herramientas de desarrollo, documentaci\u00f3n, base de usuarios, reusabilidad, transportabilidad e imposici\u00f3n al cliente.","title":"9. Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguaje de programaci\u00f3n para el desarrollo del software"}]}